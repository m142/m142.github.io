<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>诗酒趁华年</title>
    <link>http://m.sjchn.com/</link>
    <description>Recent content on 诗酒趁华年</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Fri, 07 Dec 2018 00:00:00 +0000</lastBuildDate>
    
        <atom:link href="http://m.sjchn.com/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>塑料基本知识</title>
      <link>http://m.sjchn.com/p/2018/plastic/</link>
      <pubDate>Fri, 07 Dec 2018 00:00:00 +0000</pubDate>
      
      <guid>http://m.sjchn.com/p/2018/plastic/</guid>
      
        <description>最近看到揭秘食品包装背后的真相这篇文章，了解了塑料的很多知识，感觉有必要把重点记录下来，是为本文。
 生活中常见的食品包装有易拉罐、纸和塑料，其实前两个里都含有塑料。易拉罐内侧是塑料薄膜，纸包装食物时，表面都会喷涂一层薄薄的塑料
 塑料无所不在，4500米深的海鱼里也能找到微塑料的痕迹。饮用水和食盐（尤其是海盐）里都发现了微塑料。微塑料对人体的影响还有待研究
 生活中常见的塑料有7类，比如塑料瓶底或者瓶身上会有一个三角形的框，里面的数字就代表塑料的种类。这7类塑料的详细信息如下
   PET  学名是对苯二甲酸，又叫涤纶，回收后可以做衣服和绳子。几乎不用任何添加剂，非常透明，一般不会加塑化剂 总体来说非常安全，矿泉水瓶大量使用 最大的缺点是不耐热，80度以上严重变形，140度基本融化，因此不能用来装热水 耐水又耐油，超市里常见的瓶装油瓶子一般是用1号塑料  HDPE  高密度聚乙烯，以前常见的白色油壶就是以这种塑料为材质 总体安全，但不适宜装液体食物。因为为了让这种塑料强度更高，会加入石灰或二氧化硅，如果用来装油或者奶制品，不可避免会发生萃取或溶解，因此不太安全。  PVC  学名聚氯乙烯，涉及到塑化剂的使用 常见的产品有很硬的水管、水晶垫和PV的垫片等。通过调节增塑剂的比例，产品形态也不一样。增塑剂比例越高，弹性就越好，越透明 如果食品的经过了PVC管，那么可能会导致增塑剂在食品里出现。比如家里的水管是PVC的，那就不安全  LDPE  平常生活中最常用的塑料包装，可以做得非常薄。加入化学助剂可以调整塑料的参数，比如是否容易捻开 由于添加了化学助剂，虽然量很小，但如果跟食物的可使用部分直接接触，是存在一定风险的 装食物没问题，不要跟食物的可使用部分接触  PP  学名聚丙烯，公认最安全的塑料 没有添加化学助剂，可以耐高温，放微波炉能承受140~150度高温，餐饮业广泛使用，成本相对较高  PS  学名聚苯乙烯，常见的泡沫饭盒就是这种材质 总体比较安全，高温会分解成有毒的苯乙烯 一般用来做泡沫，结晶性非常高，偏脆  PC  学名聚碳酸酯，常见的老式蓝色水桶就是这种材质 唯一的工程塑料，易加工，耐磨性和力学性非常好 唯一的缺点是含有双酚A，很难清除。双酚A是环境雌激素，非常小的量就可能对人体造成直接的影响。在尿液中的含量在1.43PPB（十亿分之一）的时候就可能对健康造成影响 双酚A与性发育提前、癌症之间可能存在关联 欧盟已禁止PC奶瓶，奶瓶都换成了玻璃或者PP   塑料在生活中到处都是，大家已经离不开了。用塑料制品的几点注意事项：
 装合适的东西。比如1号塑料可以装水装油，2号塑料就不合适
 注意使用温度
 尽量避免光照。因为光照会造成塑料的老化，家用塑料制品尽量不要超过三年
 塑料和金属一样，会疲劳。不能反复施加同样的外力
  最后，尽量少用塑料，如果可以，选择玻璃和陶瓷，因为经过一千多度高温烧制的材质，几乎永远是要比塑料安全的。</description>
      
    </item>
    
    <item>
      <title>再次尝试 Rime 输入法</title>
      <link>http://m.sjchn.com/p/2018/rime/</link>
      <pubDate>Mon, 03 Dec 2018 00:00:00 +0000</pubDate>
      
      <guid>http://m.sjchn.com/p/2018/rime/</guid>
      
        <description> 为什么说再次尝试呢，因为第一次尝试很快就删掉，但没过几周又重新尝试了 😂
好早前是在推薦一個神級輸入法——Rime这里知道 Rime 的，不过一直没有尝试。一是之前 Windows 上用的 Google 拼音输入法和后来的微软拼音也都还不错（还是想要点隐私的，所以搜狗不会考虑），后来用 Mac 了，一直用的默认输入法，实在是不太习惯，好多专业和流行的词都不能直接打出来，配置也很少，比如翻页就不能改成逗号和句号。于是尝试使用 Rime。
Mac 上安装 Rime 很简单，直接 brew cask install squirrel 就可以了。不过这只是万里长征的第一步，后面还需要更多的配置，不然基本都没法使用。
首先，是参考 https://github.com/hotoo/rime 下载了一些配置文件，然后从 https://github.com/xiaoTaoist/rime-dict 下载了搜狗、聊天、诗词等词库（虽然搜狗输入法不能用，但不可否认，它家的词库质量是很高的，这也都是大量的用户搜索积累下来的）。做完这两步后，就差不多了。对配置文件根据需求做些调整，选择简体输出，就可以了。整体输入界面还是很简洁的，如下图所示。
装完后新鲜了一段时间，逐渐就会发现很多时候还是需要选词的，基本没有词的上下文联想功能，相比搜狗、微软等还是有一定的差距，而跟 Mac 系统的默认输入法相比应该是差不多的，都需要“调教”一段时间，把一些常用的词都记录下来了就会好很多。说实话我还是倾向于使用系统默认输入法的，但不爽的主要有两点：
 配置太少，比如翻页键不能设置，[ 和 ] 太远了 不知道词库被同步到哪里了，有时打过的词好像也没记住，不知道为什么，完全不可控  就这样，暂时先用着吧，说不定哪天受不就换回了系统默认输入法了 😀
最后，我的配置文件可以从这里下载。另外附上所有的相关资料。
相关资料  https://rime.im/ https://github.com/rime/home/wiki/RimeWithSchemata https://www.dreamxu.com/install-config-squirrel/ https://github.com/xiaoTaoist/rime-dict https://github.com/hotoo/rime https://github.com/m142/conf/tree/master/rime  </description>
      
    </item>
    
    <item>
      <title>贷款基础知识之等本等息</title>
      <link>http://m.sjchn.com/p/2018/fin_dbdx/</link>
      <pubDate>Mon, 26 Nov 2018 00:00:00 +0000</pubDate>
      
      <guid>http://m.sjchn.com/p/2018/fin_dbdx/</guid>
      
        <description>前面已经讲过了等额本息和等额本金，现在来看一下不那么常见的等本等息。如果等本等息没有听过的话，那么信用卡的分期即便没用过，大部分人应该也是听过的，其实这两者基本上是一样的。
缘由是前段时间接触到了一个装修贷，具体哪家公司的就不说了，贷款的利息还挺低的，从 6% 到 7% 不等，一开始我觉得还挺不错的，下面是不同的贷款额及利率下的还款计划图。
其实一开始，我从图中也没有看出什么来，以为只是通常的等额本息还款，觉得这个利率还是挺给力、挺良心的。不过本着对金融机构不放心、不信任的原则，按照等额本息里的公式，计算了10万本金6%年利率12期条件下的月供为 8606.64，比 8833.33 少了 226.69。这就奇怪了，怎么会算出来不一致呢？然后又逐行仔细看了看，才发现了等本等息的字样。
等本等息又是什么鬼？为什么算出来的值比等额本息要高呢？其实这就是金融机构玩的一个文字游戏和障眼法。用很低的利率值做诱饵，相同的月供值让用户自然想到等额本息，然后就被忽悠上当了。这个跟银行的分期是一样的手法。这种还款方式的本质是提前计算好利息，也就是按贷款额一次性计算好利息，然后每个月还相同数额的本金和利息，还款公式为：
$$ 每月还款额 = \frac{借款本金}{还款总期数} + 借款本金\cdot 月利率 $$
不妨对比看一下等额本金的还款公式：
$$ 每月还款额 = \frac{借款本金}{还款总期数} + (借款本金-累计已还本金)\cdot 月利率 $$
对比两个公式可以明显看出，二者每月归还的本金是相同的，区别只是在利息部分，等额本金计算利息时，只考虑未归还的本金，而等本等息方式下，使用的是借款本金！！！这就是鸡贼之处。
那么对于等本等息，如果对应上等额本息的话，对应的利率应该是多少呢？后面我会介绍具体的计算方法，粗略的估算方法就是把利率乘 2，因为差不多只借了一半的钱，却还了所有的利息，这个用等差数列想一下就明白了。
最后，给出具体的数值来：12 期 6% 的等本等息对应的等额本息利率是 10.896%，36 期 7% 对应的等额本息利率是 12.83%。仅仅一字之差，利率可是几乎差了一倍！
如果可能，远离装修贷，慎用信用卡分期！
远离装修贷，慎用信用卡分期！
远离装修贷，慎用信用卡分期！</description>
      
    </item>
    
    <item>
      <title>WOE 和 IV 介绍</title>
      <link>http://m.sjchn.com/p/2018/woe_n_iv/</link>
      <pubDate>Sun, 18 Nov 2018 00:00:00 +0000</pubDate>
      
      <guid>http://m.sjchn.com/p/2018/woe_n_iv/</guid>
      
        <description>在金融相关领域的建模中，WOE 和 IV 用的比较多。之前参加的一次征信相关比赛最后的评估指标就是特征的 IV 值，用于发现征信模型中的重要特征。
IV 值的计算是以 WOE 为基础的，因此先介绍 WOE，再引入 IV。
WOE WOE 的全称是 Weight Of Evidence. 要对一个特征计算 WOE，尤其是连续型的数值特征，需要先对特征做离散化处理，也叫做分组或分箱。
为方便叙述，假设共有 $M$ 个样本，其中正负样本数量分别为 $p_M$ 和 $n_M$ ，满足 $p_M + n_M = M$。只考虑单个特征，分组数量为 $N$，第 $i$ 个分组中正负样本数量分别为 $p_i$ 和 $n_i$。则对于第 $i$ 组，其 WOE 计算公式为：
$$ WOE_i = \ln{\frac{P_{p_i}}{P_{n_i}}} = \ln{\frac{p_i/p_M}{n_i/n_M}}$$
从公式中可以看出，WOE 表达的是当前分组中正样本占所有正样本的比例与当前分组中负样本占所有负样本的比例的比例关系。
由于可能出现某个分组中正负样本某个值为零的可能，导致公式取值为正无穷或负无穷，因此实际使用中，一般会加上一个常数 $\epsilon$, 范围是 $[0, 1]$, 一般的，$\epsilon = 0.5$。WOE 调整为：
$$ WOE_i = \ln{\frac{(p_i+ \epsilon)/p_M }{(n_i+\epsilon)/n_M}}$$
IV 有了 WOE 的基础，IV 的引入就很顺利了。从 WOE 的计算公式可以看出，WOE 有正有负，分别表达了特征在该分组上与整体样本是正相关还是负相关。可以稍加变化，直接表达特征在分组上与整体样本分布的相关程度，因此引入 IV 的计算公式：</description>
      
    </item>
    
    <item>
      <title>黎明不要来</title>
      <link>http://m.sjchn.com/p/2018/dawn_no_come/</link>
      <pubDate>Sat, 17 Nov 2018 00:00:00 +0000</pubDate>
      
      <guid>http://m.sjchn.com/p/2018/dawn_no_come/</guid>
      
        <description>黎明请你不要来
就让梦幻今晚永远存在
留此刻的一片真
伴倾心的这份爱
命令灵魂迎入进来
请你唤黎明不要再不要来
现在浪漫感觉放我浮世外
而清风的温馨
在冷雨中送热爱
默默让痴情突破障碍
不许红日 教人分开
悠悠良夜不要变改
不许红日 教人分开
悠悠良夜不要变改
请你命黎明不必要再显姿彩
现在梦幻诗意永远难替代
人闯开心扉
在漆黑中抱着你
莫让朝霞漏进来</description>
      
    </item>
    
    <item>
      <title>反思一次低效的做事方式</title>
      <link>http://m.sjchn.com/p/2018/wrong-ways-about-themes/</link>
      <pubDate>Tue, 13 Nov 2018 00:00:00 +0000</pubDate>
      
      <guid>http://m.sjchn.com/p/2018/wrong-ways-about-themes/</guid>
      
        <description>周末的时候，想给小站换个主题，因为目前的主题有点太商务太传统，不够现代。大概浏览了一下，相中了 tale，特别简单的一个主题。然后就是下载，改配置，hugo server 的时候提示 hugo 版本太低，不支持 sass。这个简单，从这里直接下载最新版本即可。结果仍然提示不支持 sass，需要 extended 版本才支持，然而官方只提供了 Linux, Mac 和 Windows 平台的 extended 版本，树莓派的 arm 平台没有 extended 版本。没办法，只有自己动手编译了。
问题就出在这里了。由于惯性思维，想当然地以为树莓派内存小可能编译 hugo 会失败，于是从一开始只考虑在 Mac 和 Linux 下编译。准备工作倒都还比较简单，把 repo clone 下来即可。编译的时候碰到了一点问题，因为官方文档不是很清楚，没有写怎么为其它平台编译，以及编译的各种选项等。于是摸索了一番，得到下面的编译命令：
GOOS=linux GOARCH=arm go build -o hugo --tags extended main.go  很不巧的是，Linux 平台下报这样的错误：
# github.com/wellington/go-libsass/libs ../../go/pkg/mod/github.com/wellington/go-libsass@v0.0.0-20180624165032-615eaa47ef79/libs/sass_number.go:8:9: undefined: SassNumber ../../go/pkg/mod/github.com/wellington/go-libsass@v0.0.0-20180624165032-615eaa47ef79/libs/sass_number.go:151:10: undefined: SassNumber ../../go/pkg/mod/github.com/wellington/go-libsass@v0.0.0-20180624165032-615eaa47ef79/libs/sass_number.go:153:9: undefined: SassNumber ../../go/pkg/mod/github.com/wellington/go-libsass@v0.0.0-20180624165032-615eaa47ef79/libs/sass_number.go:157:10: undefined: SassNumber ../../go/pkg/mod/github.com/wellington/go-libsass@v0.0.0-20180624165032-615eaa47ef79/libs/sass_number.go:159:9: undefined: SassNumber ../../go/pkg/mod/github.com/wellington/go-libsass@v0.0.0-20180624165032-615eaa47ef79/libs/sass_number.go:164:10: undefined: SassNumber ../../go/pkg/mod/github.com/wellington/go-libsass@v0.0.0-20180624165032-615eaa47ef79/libs/sass_number.go:166:9: undefined: SassNumber ../../go/pkg/mod/github.com/wellington/go-libsass@v0.0.0-20180624165032-615eaa47ef79/libs/sass_number.go:170:10: undefined: SassNumber ../../go/pkg/mod/github.com/wellington/go-libsass@v0.0.0-20180624165032-615eaa47ef79/libs/sass_number.go:175:28: undefined: SassNumber .</description>
      
    </item>
    
    <item>
      <title>贷款基础知识之等额本金</title>
      <link>http://m.sjchn.com/p/2018/fin_debj/</link>
      <pubDate>Sun, 11 Nov 2018 00:00:00 +0000</pubDate>
      
      <guid>http://m.sjchn.com/p/2018/fin_debj/</guid>
      
        <description>前面已经讲过了等额本息，现在来看一下等额本金。
等额本金比等额本息计算起来简单太多了。基本原理就是每月偿还固定比例的本金，以及剩余本金在当月产生的利息。如果手边有贷款合同的话，翻开就会看到等额本金的还款公式为：
$$ 每月还款额 = \frac{借款本金}{还款总期数} + (借款本金-累计已还本金)\cdot 月利率 $$
不妨假设贷款额，也就是本金为 $v$, 月利率为 $r$, 借款期数为 $n$, 第 $k$ 期还款额记为 $x_k$。 则可以列出下表。
   期数 剩余本金 当月利息 月供     1 $v$ $v\cdot r$ $\frac{v}{n} + v\cdot r$   2 $\frac{n-1}{n}\cdot v$ $\frac{n-1}{n}\cdot v\cdot r$ $\frac{v}{n}+\frac{n-1}{n}\cdot v\cdot r$   3 $\frac{n-2}{n}\cdot v$ $\frac{n-2}{n}\cdot v\cdot r$ $\frac{v}{n}+\frac{n-2}{n}\cdot v\cdot r$   &amp;hellip;      k $\frac{n-k+1}{n}\cdot v$ $\frac{n-k+1}{n}\cdot v\cdot r$ $\frac{v}{n}+\frac{n-k+1}{n}\cdot v\cdot r$   &amp;hellip;      n $\frac{1}{n}\cdot v$ $\frac{1}{n}\cdot v\cdot r$ $\frac{v}{n}+\frac{1}{n}\cdot v\cdot r$    显然，等额本金还款方式下，月供逐渐降低，前期压力很大，后期压力越来越小。仍然举一个实际的例子：贷款100万元，贷款期限为20年，贷款年利率为最新基准利率上浮20%，也就是5.</description>
      
    </item>
    
    <item>
      <title>树莓派修改fstab文件无法启动</title>
      <link>http://m.sjchn.com/p/2018/raspberrypi_fstab_issue/</link>
      <pubDate>Sat, 10 Nov 2018 08:24:09 +0800</pubDate>
      
      <guid>http://m.sjchn.com/p/2018/raspberrypi_fstab_issue/</guid>
      
        <description>多年前买的树莓派2现在仍在正常工作着，主要用作下载机，然后开着samba服务，在小米盒子上放电影什么的，最近都是给小孩看动画片用。当然之前的sd卡内存比较小，加了一个U盘。因为树莓派放在路由器旁边，一年也难得启动一回，所以就没有给U盘配置自动mount。前几天打扫卫生，给路由器和树莓派的换了个小巧的插座，就重启了。然后当天小孩要看动画片的时候发现找不到。这才想起来要去手动mount U盘。
于是晚上搜索了一下，基本思路是通过 blkid 命令查看U盘的UUID，然后在 /etc/fstab 里加上对应的条目即可，最后我加上了下面这条：
UUID=4e578159-c983-42f2-9ac8-e156e819afgf /home/dl/usb ext4 gid=dl,uid=dl 0 0  重启，然后就发现树莓派连接不上了，连接不上了，连接不上了！
那肯定就是因为改了 /etc/fstab 导致的。没办法，又去搜索 fstab 搞坏了怎么办。比较有用的是changed-the-fstab-file-now-stuck-in-a-reboot-loop 以及 emergecy-mode-bad-fstab。需要先把SD卡取出，放入读卡器（还好当时买树莓派送的读卡器没有丢），插上电脑，之后就有三种方法：
 在 boot 分区内，找到 cmdline.txt 文件，该文件应该只有一行，在最后加上 init=/bin/sh，然后保存。再将SD卡插回树莓派，启动后就会进入紧急模式，修复 /etc/fstab 文件后再将SD卡取出，在电脑上将 cmdline.txt 文件复原即可。这种方法需要有外接显示器和键盘，操作起来比较费劲，我直接就放弃了。其实主要是因为我的Mac不知道什么原因插上读卡器后没反应，死活识别不了。一开始我还以为是读卡器的问题，后来用Windows电脑试了后才发现读卡器是OK的。 找到一台Linux机器，插上读卡器后，自动mount两个分区，一个是boot分区，另一个就是系统分区，然后直接修改树莓派系统的 /etc/fstab 文件，将错误的行注释或删掉即可。这个的难点是找了一圈也没找到Linux机器，后来没办法就找了一台Windows机器，装了Debian虚拟机，然后搞定。 重新刷一个新系统……  如果有Linux机器或者Windows上有装Linux虚拟机的话，第2种方法是最快的；其次是第1种方法，不过需要有外接显示器和USB键盘；如果没什么重要数据的话直接刷新系统也可以。
回头有空再研究下 fstab 应该怎样写，目前试一次不成再改回成本有点高。</description>
      
    </item>
    
    <item>
      <title>贷款基础知识之等额本息</title>
      <link>http://m.sjchn.com/p/2018/fin_debx/</link>
      <pubDate>Mon, 05 Nov 2018 00:00:00 +0000</pubDate>
      
      <guid>http://m.sjchn.com/p/2018/fin_debx/</guid>
      
        <description>大家如果办过贷款，尤其是房贷的话，相信对等额本息不会陌生。与等额本息同时出现的，还有等额本金。本文先详细介绍等额本息，后面再介绍等额本金等。
等额本息指的是还款期限内，每个月还款额（包括本金和利息）固定，其中本金部分逐月递增，利息部分逐月递减。
如果手边有贷款合同的话，翻开就会看到每月的还款额计算公式为：
$$ 每月还款额 = \frac{借款本金 \cdot 月利率 \cdot (1 + 月利率)^{还款总期数}}{(1 + 月利率)^{还款总期数} - 1} $$
举个实际的例子，比如贷款100万元，贷款期限为20年，贷款年利率为最新基准利率上浮20%，也就是5.88%，那么代入公式得到每月还款额为7095.25元。
$$ 每月还款额 = \frac{1000000 \cdot 5.88\%/12 \cdot (1 + 5.88\%/12)^{240}}{(1 + 5.88\%/12)^{240}-1} = 7095.25 $$
好的，到现在为止，至少就有了 3 个问题：
 每月还款额的公式是怎么推导出来的？ 每月还款额里本金和利息分别是多少？ 用年利率除以 12 得到月利率是否合理？  下面来逐个分析。
每月还款额公式推导 不妨假设贷款额，也就是本金为 $v$, 月利率为 $r$, 借款期数为 $n$, 每月还款额为 $x$. 则可以列出下表。
   期数 本金+利息 还款 剩余本金+利息     $1$ $v\cdot(1+r)$ $x$ $S_1 = v\cdot(1+r) - x$   $2$ $S_1\cdot(1+r)$ $x$ $S_2 = S_1\cdot(1+r)-x$   &amp;hellip; &amp;hellip; $x$ &amp;hellip;   $n$ $S_{n-1}\cdot(1+r)$ $x$ $ S_n = S_{n-1}\cdot(1+r)-x$    从表中可以看出，第一期结束时，本金 $v$ 产生的利息为 $v \cdot r$，因此本金加利息为 $v\cdot(1+r)$ ，还款 $x$ 后，剩余金额为 $v\cdot(1+r) - x$，记为 $S_1$。依此类推，得到每期结束时的剩余金额 $S_i$，而要求的正是使得 $S_n = 0$ 的 $x$ 的值。不妨将 $S_n$ 展开，得到：</description>
      
    </item>
    
    <item>
      <title>PNPOLY: 射线法判断点是否在多边形区域内部</title>
      <link>http://m.sjchn.com/p/2018/pnpoly/</link>
      <pubDate>Mon, 22 Oct 2018 00:00:00 +0000</pubDate>
      
      <guid>http://m.sjchn.com/p/2018/pnpoly/</guid>
      
        <description>最近跟地图打交道，有个问题是判断点是否在某个多边形区域内（一般都是凸多边形）。 其实之前也知道一个算法：就是以要判断的点为起点，以区域的顶点为终点作线段或直线， 遍历所有区域顶点，判断直线扫过的角度，如果是360度，说明在区域内，否则就是在区域外。
这次学到了一个新的算法 PNPOLY，代码非常简练，如下：
int pnpoly(int nvert, float *vertx, float *verty, float testx, float testy) { int i, j, c = 0; for (i = 0, j = nvert-1; i &amp;lt; nvert; j = i++) { if ( ((verty[i]&amp;gt;testy) != (verty[j]&amp;gt;testy)) &amp;amp;&amp;amp; (testx &amp;lt; (vertx[j]-vertx[i]) * (testy-verty[i]) / (verty[j]-verty[i]) + vertx[i]) ) c = !c; } return c; }  该算法的核心思想就是：以测试点为起点，作一条水平的射线，判断该射线与多边形区域的边的交点个数，如果为奇数个，说明在区域内，否则就在区域外。 为什么能成立呢？可以这样考虑：多边形区域（不考虑有洞的情况）将空间分成了内外两个部分，如果测试点在空间内，那么作一条射线，至少会与边有一个交点，相交后就到了区域外。 如果再有一个交点，又到了区域内，以此类推。因此奇数个交点说明在区域内，偶数个说明在区域外。 更专业的证明可以参考 Jordan curve theorem。
理解了思想，就是具体实现了。这段代码的详细解释如下：
 for (i = 0, j = nvert-1; i &amp;lt; nvert; j = i++)</description>
      
    </item>
    
    <item>
      <title>记录新学到的一个词——自证预言</title>
      <link>http://m.sjchn.com/p/2018/self-fulfilling-prophecy/</link>
      <pubDate>Sun, 24 Jun 2018 00:00:00 +0000</pubDate>
      
      <guid>http://m.sjchn.com/p/2018/self-fulfilling-prophecy/</guid>
      
        <description>这段时间看《博弈与社会》，读到一个词 自证预言。还是贴一下英文原版的定义：
The self-fulfilling prophecy is, in the beginning, a false definition of the situation evoking a new behavior which makes the original false conception come true. This specious validity of the self-fulfilling prophecy perpetuates a reign of error. For the prophet will cite the actual course of events as proof that he was right from the very beginning.
通俗来说，指的是一件错误或不可能发生的事情，由于预言的存在， 导致了一些新的行为产生，而这些行为又促使事情的发生朝着预言的方向而去， 从而使得最后预言成真。
概括起来就三个字：乌鸦嘴。
虽然乌鸦嘴是个贬义词，但自证预言这种现象本身是中立的， 重要的是看你在现实生活中如何应用它。
其实有很多自证预言的例子。比较著名的有希腊神话中俄狄浦斯的故事： 神谕表示俄狄浦斯会杀死他父亲，因此他父亲在他出生后就想杀死他， 然而奉命执行的牧人新生怜悯放过了他，最终在不知情的情况下， 他杀死了自己的父亲并娶了自己的母亲； 一些教育领域的实验也展示了类似的效应： 一些被告知高智商的学生在后来学习成绩突飞猛进，其实这些学生是随机挑选的； 还有一个搞笑的：上海一男子因造谣称自己因造谣而被拘留15日而被拘留15日。</description>
      
    </item>
    
    <item>
      <title>Python 中奇特的 else</title>
      <link>http://m.sjchn.com/p/2018/py-for-else/</link>
      <pubDate>Mon, 28 May 2018 00:00:00 +0000</pubDate>
      
      <guid>http://m.sjchn.com/p/2018/py-for-else/</guid>
      
        <description>今天看 Hacker News 发现了 Python 的一个小众特性：For - Else。
原来 Python 里 else 还能跟 for 一起使用，当 for 循环正常退出（不是用 break 退出）时， else 里的语句会被执行。比如下面的代码：
for n in range(2, 10): for x in range(2, n): if n % x == 0: print( n, &#39;equals&#39;, x, &#39;*&#39;, n//x) break else: # loop fell through without finding a factor print(n, &#39;is a prime number&#39;)  输出如下。可以看出，当执行到 break 退出 for 循环时， else 语句没有执行；而 for 循环完整执行完后，else 语句执行了。
2 is a prime number 3 is a prime number 4 equals 2 * 2 5 is a prime number 6 equals 2 * 3 7 is a prime number 8 equals 2 * 4 9 equals 3 * 3  上面的代码如果不用 else，那就要这么写。代码量上稍微复杂一丢丢。</description>
      
    </item>
    
    <item>
      <title>Mac 上 Excel 的一个恼人问题</title>
      <link>http://m.sjchn.com/p/2018/mac-excel-recover-issue/</link>
      <pubDate>Wed, 23 May 2018 00:00:00 +0000</pubDate>
      
      <guid>http://m.sjchn.com/p/2018/mac-excel-recover-issue/</guid>
      
        <description>就不提 Mac 上的 MS Office 有多难用了，而且时不时崩溃，体验和在 Windows 下完全没法比。 某一次 Excel 崩溃后，每次打开 Excel 文件，窗口都会暂时被锁定，并且弹出对话框： 在应用程序意外退出之前，Excel已保存了对文件的更改。 是否要打开此文件上次保存的版本？
如下图所示。这个时候真的是想砸了电脑 🔨
试了各种方法：打开上次的文件并另存为；删掉上次的那些文件；清除 Excel 的Cache …… 都不能解决问题。 并且，MS 官网上的解答也完全没用，根本就不能解决问题。为此实在是困扰很久很久。
今天偶然找到了 StackExchange 上的一个回答，终于彻底解决了这个问题。 其实就一行命令的事情：
rm &amp;quot;/Users/didi/Library/Group Containers/UBF8T346G9.Office/MicrosoftRegistrationDB.reg&amp;quot;  </description>
      
    </item>
    
    <item>
      <title>《原则》初读简记</title>
      <link>http://m.sjchn.com/p/2018/principles/</link>
      <pubDate>Mon, 21 May 2018 00:00:00 +0000</pubDate>
      
      <guid>http://m.sjchn.com/p/2018/principles/</guid>
      
        <description>其实在几个月前就收到了这本书，也不厚，不到 550 页，断断续续居然翻了两个月才读完，确实有点慢。 不过说实话，这本书不是那么好读，说不上来为什么。 看这种翻译的书，总是觉得怪怪的，很多时候读起来每个字都能看懂，也能理解其中的意思，但就是觉得有点怪，也许就是翻译还没有到雅的境界。
这本书在金融界评价很高，很火热，可能跟作者的身份是有关的。 但说实话，对普通人而言，其实这本书不太友好。 本书主要由作者的自传、生活和工作原则三部分组成。 文中，穿插了及其多的细节性的各种原则，让人眼花缭乱， 要想看一遍就记住所有的原则条文，估计只有过目不忘的天才才能做到。 对于一个目前还处于把书看薄阶段的我来说，只要从中吸取最核心的部分就可以了。
对我而言，以下几点是最重要的：
 行为处事要有自己的原则，贯彻执行且始终如一 保持头脑极度开放，吸收汇聚各方意见，提升自我认知 平衡民主和专政，大部分时候应该保持极度求真和极度透明，但需要知道何时是例外 理解人与人之间的大不同，不断学习和培养同理心 做自己喜欢的，有意义的工作，发展有意义的人际关系，并从中获得快乐  另外，这几年开始接触并逐步和学习理解的一个词是：决策。这本书里也提到过很多次这个词。 其实，决策无处不在，只是以前没有意识到。 就像呼吸，如果不特意去体会是感受不到一样。 另外还一个有意思的是鼻子，其实眼睛每天都能看到它，但总是将它忽略（不信你闭上一只眼睛试试）。 近来看的一些书，从经济学、心理学等领域来探讨决策，从不同的角度来看，也让我对决策有了更深的理解，这个以后再来探讨。</description>
      
    </item>
    
    <item>
      <title>不要与喷子一般见识</title>
      <link>http://m.sjchn.com/p/2018/keyboard-man/</link>
      <pubDate>Sat, 19 May 2018 00:00:00 +0000</pubDate>
      
      <guid>http://m.sjchn.com/p/2018/keyboard-man/</guid>
      
        <description>A keyboard man or keyboard warrior (键盘侠) is someone who expresses and exhibits aggression against others on the internet. 1
(图片来自网络，侵删) 最近发生了不少大事，比如空姐滴滴顺风车被害、川航挡风玻璃破裂，等等。 川航的事情倒是学会了一个新词，叫杠精。其实任何一件事情，有异议都是正常的，不然没有质疑没有争论社会就不会进步，科学也不会发展，因为历史上大的发现或发明很多都是对已有认知的颠覆，比如日心说颠覆了地心说、相对论在高速场景下对牛顿力学的颠覆、量子力学在微观场景下对牛顿力学的颠覆，等等，不一而足。 日常生活中，也总会碰到各种杠精，最好的办法就是不去搭理他们，这样他们就会自讨无趣，不然只会把自己的心情搞的一团糟。参见 新志异之十：安公。
键盘侠如果把其中的侠给去掉呢，和杠精一起，我觉得可以称为喷子。 喷子也会有一些分类，比如有些完全不讲道理，撒赖放泼型的，语言毫无逻辑，出口成脏，人身攻击型的； 也有一些抓住一个小点疯狂攻击，只站在自己的立场上，只见树叶不见树木，更不用说见树林了； 还有一些是“ 引经据典”（类比某呼），看似有理，其实仔细推敲查阅，发现其实是一本正经的胡说八道。 有什么样的观点并不是最重要的，重要的是观点要能拿出来讨论分析和争论，但在喷子的世界观里， 只有黑白两种颜色，他们最喜欢做的事情是扣帽子，贴标签，比如：
 你为 TA 说话，你是不是收了什么好处 你不喜欢 XXX，你批评 XXX，有本事你走啊/有本事你上啊 评价一台冰箱，难道还需要自己会制冷吗  争论一旦出现类似上面这些，如果还非要继续下去的话，往往会发展成谩骂。 碰到这种情况，不妨想想，如果一个人非要跟你争论关公能战胜秦琼，或者说北极熊生活在南极，这种情况下你会怎么办？ 当然是露出尴尬而不失礼貌的微笑，心里默念一句SB，然后走开喽。</description>
      
    </item>
    
    <item>
      <title>去香港打13价肺炎疫苗</title>
      <link>http://m.sjchn.com/p/2018/hongkong-pcv13/</link>
      <pubDate>Mon, 14 May 2018 00:00:00 +0000</pubDate>
      
      <guid>http://m.sjchn.com/p/2018/hongkong-pcv13/</guid>
      
        <description>其实在 2016 年底，药监局批准了 13 价肺炎疫苗（PCV13）上市，但针对的是 2 岁以内的幼儿，需要打 4 针，分别是 2、4、6、12~15 月龄的时候，费用不菲，并且如果错过第一针的时间（超过6个月），那么就不能再打了。
由于前几年国内的自费疫苗出过一次事情，当时就没有打这个疫苗，现在孩子超过2岁了，也不能在内地打。 前段时间刚好去香港办点事，想着就顺便带小孩去打了这个疫苗。由于去香港打疫苗的人特别多，所以国内是有不少中介的，可以帮忙预约。但是当时我们通过中介预约的时候发现都约满了，可想而知有多火爆了…… 后来辗转得知一个网站 https://www.edr.hk/，上面有香港所有注册医生的资料，如果是打疫苗的话，随便一个普通科医生就好。搜索酒店附近的诊所，直接打电话预约就好了，一般都是能约上的。
对了，PCV13 的收费都是标准的，1100 的疫苗费用加上 350 的出诊费一共 1450 港币，挺实惠的。
另外，香港疫苗中心 的网站上，有很多有用信息，可以参考。</description>
      
    </item>
    
    <item>
      <title>Bash 中 [ 和 [[ 整数比较的坑</title>
      <link>http://m.sjchn.com/p/2018/bash-cmp-pitfall/</link>
      <pubDate>Sun, 06 May 2018 00:00:00 +0000</pubDate>
      
      <guid>http://m.sjchn.com/p/2018/bash-cmp-pitfall/</guid>
      
        <description>最近碰到了 bash 中 [ 和 [[ 中数字比较的不同之处，踩了一个坑。
旧的代码类似这样 [ &amp;quot;\$data_date&amp;quot; -gt &amp;quot;\$yesterday&amp;quot; ] &amp;amp;&amp;amp; echo &amp;quot;yes&amp;quot;， 已经正常运行很长时间了。 升级的时候改成了 [[ &amp;quot;\$data_date&amp;quot; -gt &amp;quot;\$yesterday&amp;quot; ] &amp;amp;&amp;amp; echo &amp;quot;yes&amp;quot;， 其中的 $data_date 和 $yesterday 是月和日的组合， 类似 date +&amp;quot;%m%d&amp;quot; 的输出结果 0506 这样。
升级的前几天都挺正常的没问题，突然4月18号出问题了，报错信息如下：
$ [[ &amp;quot;0418&amp;quot; -gt &amp;quot;0417&amp;quot; ]] &amp;amp;&amp;amp; echo &amp;quot;yes&amp;quot; -bash: [[: 0418: value too great for base (error token is &amp;quot;0418&amp;quot;)  原来，在新的比较 [[ 中， 0418 这种以 0 开头的数字被识别成八进制数字了， 而用 [ 比较时，是被识别成十进制的数字。下面可以证明：</description>
      
    </item>
    
    <item>
      <title>VPS 推荐</title>
      <link>http://m.sjchn.com/p/2018/vps-reco/</link>
      <pubDate>Sat, 05 May 2018 00:00:00 +0000</pubDate>
      
      <guid>http://m.sjchn.com/p/2018/vps-reco/</guid>
      
        <description>之前推荐过 DigitalOcean 的 VPS，后来其实又尝试过 Vultr 的，速度都很慢，Youtube 1080p 都看不了，虽然平时我也不怎么看，但就是很慢。
最近偶然看到 搬瓦工 推出了 CN2 线路的 VPS，年付 $29.99。尝试了一下，可以直接安装 BBR 内核，速度的确快，Ping 值稳定在 170ms 左右，Youtube 4K 视频都没问题，网页也是秒开，真的是一下从绿皮火车升级成高铁了，太舒服了。
然后，我就把 DigitalOcean、Vultr 都退掉了。
最后附上搬瓦工优惠码：
 BWH1ZBPVK (6.00%) IAMSMART5YA8FO (3.91%) IAMSMART5TDT48 (3.82%)  </description>
      
    </item>
    
    <item>
      <title>About</title>
      <link>http://m.sjchn.com/about/</link>
      <pubDate>Tue, 01 May 2018 00:00:00 +0000</pubDate>
      
      <guid>http://m.sjchn.com/about/</guid>
      
        <description> 望江南 —— 超然台作
春未老，风细柳斜斜。试上超然台上看，半壕春水一城花。烟雨暗千家。
寒食后，酒醒却咨嗟。休对故人思故国，且将新火试新茶。诗酒趁华年。
 VPS 推荐: 搬瓦工 BandwagonHost
搬瓦工已推出 CN2 线路的 VPS，年付 $29.99，速度快，特别推荐，点此购买
搬瓦工优惠码：
 BWH1ZBPVK (6.00%) IAMSMART5YA8FO (3.91%) IAMSMART5TDT48 (3.82%)  Email: m###sjchn.com
 var o=document.getElementById(&#34;mea&#34;); var s=o.text.replace(&#39;###&#39;,&#39;@&#39;); o.text=s;o.href=&#39;mailto:&#39;+s;     (adsbygoogle = window.adsbygoogle || []).push({});  -- </description>
      
    </item>
    
    <item>
      <title>AUC 和 ROC</title>
      <link>http://m.sjchn.com/p/2016/auc-roc/</link>
      <pubDate>Mon, 28 Mar 2016 00:00:00 +0000</pubDate>
      
      <guid>http://m.sjchn.com/p/2016/auc-roc/</guid>
      
        <description>AUC 是点击率预估模型的常用评价指标，一般来说，AUC 越高，点击率模型越好，当然这也不是绝对的。虽然平时用 AUC 挺多的，但是一直没有深入去研究清楚，导致前几天被人问起的时候基本没答上来，很是忏愧。
AUC 其实是 Area Under Curve，然后这个 Curve 就是 ROC，全称是 Receiver Operating Characteristic，通常又叫做 ROC Curve。AUC 其实就是这个曲线下的面积了。AUC 有一个很重要的统计特性：AUC 值等于分类器对随机选择的正样本的预测值高于对随机选择的负样本的预测值的概率。AUC 的详细介绍和分析可以看这篇论文：An introduction to ROC analysis.
在说 ROC 之前，先说一下二值分类器的一些常用术语。如下所示，左边是模型预测的结果，上面是实际的分类情况。
    True Class 1 0     Prediction 1 TP FP    0 FN TN    来看下图，ROC 的横轴是 FPR (False Positive Rate)，纵轴是 TPR (True Positive Rate)，它们的定义分别如下：
$$ FPR = \frac{FP}{FP + TN}$$ $$ TPR = \frac{TP}{TP+FN} $$ 不妨来看图中的 4 个顶点：</description>
      
    </item>
    
    <item>
      <title>Python 相关的数据挖掘利器</title>
      <link>http://m.sjchn.com/p/2016/python-data-mining/</link>
      <pubDate>Thu, 25 Feb 2016 00:00:00 +0000</pubDate>
      
      <guid>http://m.sjchn.com/p/2016/python-data-mining/</guid>
      
        <description>首先需要反省一下自己，对新事物的好奇心不够强烈，很多时候都是浅尝辄止，没有深入去了解，以致错失了很多机会，也让我不能看透很多事情，很多方面不能形成自己的知识积累。是一个极大的缺点，需要改正。
其实几年前就听说过 IPython，当时以为只是 Python 的另外一个 REPL 终端而已，没有深入去了解。
平时工作中的数据量都很大，一般都是存储在 HDFS 上，加载到单机上比较费劲，都是用 Spark (之前用 Pig) 去分析，偶尔也会写一些一次性的 Python 脚本，有作图需求时都是把数据分析出来导入 Excel。大部分情况下这样其实还可以。
只是最近试着参加了 kaggle 上的 Airbnb recruiting 比赛，见识到了 Python 系列工具在数据挖掘中的强大。而且也加深了对 IPython 的认识，尤其是 IPython Notebook (或者叫 Jupyter Notebook) 的强大和便捷。
NumPy, matplotlib, xgboost 和 scikt-learn 以前也接触过，了解一些。但 Pandas, Seaborn 等还真没用过。看着别人把这些工具耍得贼熟，感觉自己像原始人一样站在一边…… 虽说用 Spark 来搞也没啥问题，但是毕竟有点麻烦。不学习一下真是说不过去，就会被别人远远地抛在后面。
如果要用 Python 做数据分析相关工作，可以直接装 Anaconda。它打包了很多有用的库，另外可能需要单独装下 xgboost 和 seaborn（或者还有其它的包，试一下就知道）。完成这些后，基于 Python 的数据分析平台环境就搭建好了。具体 Pandas, xgboost, seaborn 等的应用可以查看各自的文档。话说 Pandas 里的 DataFrame 真是很强大，Spark 中新的 ml 库 (替换旧的 mllib) 也大量使用了 DataFrame。
还有一个强大的工具，Jupyter Notebook.</description>
      
    </item>
    
    <item>
      <title>中国的地图偏移问题</title>
      <link>http://m.sjchn.com/p/2016/china-map-shift/</link>
      <pubDate>Mon, 25 Jan 2016 00:00:00 +0000</pubDate>
      
      <guid>http://m.sjchn.com/p/2016/china-map-shift/</guid>
      
        <description>今天偶然了解到一个好玩，或者说不那么好玩，甚至让人恶心反感的事情，那就是 GPS 在地图上定位的偏移问题。
GPS 全称是 Global Positioning System (全球定位系统)，是接收卫星的信号，计算所在位置的经纬度，这个数据一般都是没问题的。但是要在地图上显示出来，就牵涉到地图的问了。
地图，就是将坐标映射到图像中的点上。国际标准是 WGS-84，而中国出于所谓 国家安全 的考虑，制订了 GCJ-02 标准。该标准其实就是将 WGS-84 的数据通过某种算法（数学运算）加以混淆，对每个点都加上一定量的偏移。该算法设计比较“巧妙”，偏移是非线性的，各地偏移量和便宜方向都不定，没有算法直接复原。
但是实际上，这种做法除了恶心自己人以外，基本没有任何作用。首先，由于有很多地方（民用）需要用到真实的地图坐标，因此混淆算法的泄露是必然的，代码见 这里。既然已经有算法了，以广大人民的无穷智慧，相应的从 GCJ-02 到 WGS-84 的复原算法也就出来了，代码见 这里。
由于有这项规定在，国内合法公开的地图数据都是加过偏移的，如果使用原始的 GPS 数据，那肯定会造成偏移。但是大家又需要有正确的数据进行导航，因此导航软件会对 GPS 和地图数据做处理，尽量修复偏移。也就是说，这项 SB 规定除了让某些部门中饱私囊，恶心自己人，阻碍生产力发展外，没有任何用处。对国家安全其实起不到任何保护作用。
类似的还有厂商在产品中内置加密后门，以达到某些目的。这种行为其实就是在安全领域干着明知不安全的事情。对此，无话可说。</description>
      
    </item>
    
    <item>
      <title>aria2</title>
      <link>http://m.sjchn.com/p/2016/aria2/</link>
      <pubDate>Sat, 09 Jan 2016 00:00:00 +0000</pubDate>
      
      <guid>http://m.sjchn.com/p/2016/aria2/</guid>
      
        <description>用树莓派做下载机，除了速度慢点，其它都挺不错的，功耗低，也稳定。 aria2 是一款非常优秀的小下载工具，支持 http/https, ftp, sftp, bt, metalink 等协议，除了命令行外，也有 web ui，是 Linux 系统上下载的不二选择。
1. 编译安装 下载最新的版本 1.19.3 ，并解压，进入目录并执行以下命令编译安装。
sudo apt-get install autoconf autopoint libtool ./configure make sudo checkinstall # uninstall: `sudo dpkg -r aria2`  2. 配置 aria2 的配置文件是 ~/.aria2/aria2.conf ，所有的配置项说明都可以在 这里 找到。我的配置如下所示。 其中，dir, rpc-listen-port, rpc-secret 等参数可以根据自己需要配置，各参数的含义见 文档 。
log=/tmp/aria2c.log dir=~/download # http check-certificate=false http-accept-gzip=true user-agent=uTorrent/2210(25130) # rpc rpc-allow-origin-all=true rpc-listen-port=6800 rpc-secret=secretstring # download max-concurrent-downloads=5 continue=true max-connection-per-server=5 min-split-size=10M split=10 # bt bt-enable-lpd=true bt-max-open-files=256 bt-max-peers=64 bt-prioritize-piece=head=4M,tail=4M bt-tracker-connect-timeout=16 bt-tracker-timeout=16 peer-id-prefix=-UT2210- # advanced #daemon=true # use `aria2c -D` to start daemon disk-cache=32M file-allocation=falloc log-level=notice  配置文件中之所以没有将 daemon 配置成 true，主要是考虑到有时候需要用命令行下载，如果将 aria2 默认启动为 daemon 则不太方便。同时，如果需要启动为 daemon，则加上 -D 参数即可，非常方便。</description>
      
    </item>
    
    <item>
      <title>关于熵的一点胡思乱想</title>
      <link>http://m.sjchn.com/p/2015/entropy-delusion/</link>
      <pubDate>Sun, 27 Dec 2015 00:00:00 +0000</pubDate>
      
      <guid>http://m.sjchn.com/p/2015/entropy-delusion/</guid>
      
        <description>前段时间的一个晚上看了点 PRML ，睡觉时突然考虑起一个问题来：为什么人应该有鲜明的观点，或者说为什么大部分人都喜欢有鲜明观点的人，而好好人、骑墙派则一般不太受欢迎。当时就想，也许可以用熵的概念来解释呢。
在 热力学 中，通俗地，可以将熵看成是系统混乱程度的度量。在一个孤立的系统中，根据热力学第二定律，熵是倾向于逐渐增加的。一个不那么恰当的例子就是：如果房间很长时间都没有打扫整理的话，就会到处充满灰尘乱糟糟的，这就造成了熵的增加。
在 信息论 中，熵是接收的每条消息中包含的信息的平均量。可以看成是不确定性的量度。例如，抛一枚均匀的硬币（正反面概率都是 0.5）的熵比抛一枚不均匀的硬币（正面概率大于反面概率）的熵要大。因为后者是正面的概率要大，而前者完全不能确定是正面还是反面（因为它们的概率一样大）。
假设某事件 $x$ 发生的概率为 \( p \)，那么它的熵定义为： $$ -p \log(p) $$
从这一定义再来看刚才的例子，抛一枚均匀硬币结果是正面的概率为 0.5，熵是 $ -0.5 * \log(0.5) = 0.347 $；而抛不均匀硬币（假设正面概率是 0.8），则熵是 $ -0.8 * \log(0.8) = 0.179 $，显然小于前者。
但是这些跟开头提到的问题有什么关系吗？也许是可以有关系的！
从物理学的角度考虑，世间的万物，如果将每个个体（包括动物，植物等）看成孤立的个体，那么每个个体在成长的过程中，基本都是朝着熵减少的方向进行的。比如植物发新芽，长新叶，长高，吸收二氧化碳进行光合作用呼出氧气；人类学习新知识，整理房间，锻炼身体等等，都是使熵减少的行为。一般地，积极、努力都能使熵减少，而颓废则会让熵增加。通常，大家肯定都是喜欢积极、阳光、健康、有朝气的景象和事物，这也就是说相对来说，大家都喜欢具有较小的熵的事物。
而从信息论的角度考虑，具有鲜明观点的人的行为具有可预测性，可以看成从他们那会以一个较大的概率（比如 0.8）接收到确定的信息，因而信息熵比较小。而好好人，骑墙派则由于没有自己的观点，所以不确定性比较大，换言之，就是他们往往处在天平的中央，相当于接收信息时的确定性是 0.5 左右，这样就会有一个较高的熵值。一般地，人们喜欢稳定、确定性和可预测性的事物，相对不太喜欢有变数的事物。所以从这点来看，低熵更受欢迎。
以上纯属胡言乱语，如有属实，不是巧合。</description>
      
    </item>
    
    <item>
      <title>数据库中如何保存密码</title>
      <link>http://m.sjchn.com/p/2015/how-to-store-password-in-db/</link>
      <pubDate>Thu, 26 Nov 2015 00:00:00 +0000</pubDate>
      
      <guid>http://m.sjchn.com/p/2015/how-to-store-password-in-db/</guid>
      
        <description>网站开发一般都会涉及到数据库设计，而数据库设计大多数情况都会涉及到密码的保存。近几年发生过多起网站用户信息泄露事件：CSDN 用户账号及明文密码泄露，网易邮箱过亿用户数据泄露 等等。通过这些事件，大家对网络安全也越来越重视，而信息安全中最重要的一项就是密码，用户如何选择密码和保存密码是另外一个话题，本文主要探讨服务器端（网站）是如何保存密码的。
下面首先介绍三种安全性较差（不推荐）的保存方法，然后介绍安全性较好（推荐）的保存方法。
安全性较差 1. 明文保存 最简单的处理方式就是不做处理，用户密码是什么就保存什么。
CSDN 事件中，官方声明泄露的数据是 2009 年的备份数据库。如果账号是在 2009 年之后注册的，那么就没有遭到泄露，而在那之前的则都泄露了。这就说明在 2009 年数据库备份之前，CSDN 的网站数据库中是把用户密码保存成明文的。
明文保存当然是最不安全的，尤其是很多人同一个密码会用在多个网站上。而类似 CSDN 这样泄露的数据就会被人利用做成社工库，比如 这个 和 这个 。
现在的数据库中绝对不应该保存明文密码！
2. 加密保存 如无特别说明，本文所指的加密都是指可逆加密，如 AES, RSA 等算法的加密方式。
有时候，为了某些特殊的原因，网站可能需要知道用户的明文密码。但是为了降低密码泄露的风险，会对密码做加密然后保存。在有需要的时候，再将保存的数据解密得到明文密码。
相对于明文保存，这种方法看起来更安全。但实际上，安全性并没有提高多少。因为，现在安全的中心在于保护加密密钥的安全，一旦加密方法和加密密钥泄露出去了，数据库中加密后的密码就和明文无异了，所以这种方法只不过是将安全性转移了而已，除了为达到某些特殊的目的之外，并没有多大用处。
根据网上公开的信息，很少看到有采用这种方法的。
3. 简单哈希保存 相比前两种而言，这种方式在安全性上有很大的提升。因为一般来说哈希是不可逆的，所以即便拿到了数据库中的数据，从哈希值倒推回明文密码的可能性也是很小的。但是这并不意味着绝对安全，因为有其它方式可以破解出明文密码来。
在实际的使用中，主要有两种不同的使用方法：只对明文密码做哈希；在明文密码上加 盐 ，再做哈希。很显然后一种方法的安全性较高。
哈希方法的专业称呼是 KDF: Key Derivation Function。下面根据哈希算法的不同，分别介绍。
3.1 MD5 在早期的网站设计中，由于 MD5 速度快，并且没有出现相应的攻击方法，因此应用最为广泛。然而，速度快是它的优点也是它的最大缺点。因为只需要构造一个表，把常见密码及其对应的 MD5 值保存下来，碰到 MD5 后的密码值，很容易查到原始的明文密码，尤其是在没有加盐或者盐比较简单的情况下。
现在已经有一些网站提供查找 MD5 对应的原始串的服务，比如 https://crackstation.net/ , http://md5decrypt.net/en/ , https://isc.sans.edu/tools/reversehash.html 等。它们的原理其实就是维护 彩虹表 。比如输入 7cbb3252ba6b7e9c422fac5334d22054 查询出来的原始串是 q1w2e3 ，这也是很常见的一个密码。</description>
      
    </item>
    
    <item>
      <title>路由器配置 DDNS</title>
      <link>http://m.sjchn.com/p/2015/openwrt-ddns/</link>
      <pubDate>Sun, 22 Nov 2015 00:00:00 +0000</pubDate>
      
      <guid>http://m.sjchn.com/p/2015/openwrt-ddns/</guid>
      
        <description>路由器已经刷了 OpenWrt，接下来可能会用树莓派做一些事情，比如 NAS，还有很多没想好的。由于路由器每次启动拨号得到的 ip 地址不一样，运营商也可能会隔段时间给分配个新的 ip，所以需要配置 DDNS。
有个在 Namecheap 注册的域名，Namecheap 的文档还是比较不错的，比如有介绍 如何在 ddwrt 上配置 DDNS，还有 如何发送 http 请求实现 DDNS。
其实 OpenWrt 上就有 DDNS Client，并且有 UCI 配置界面。从 AA 12.09 版本开始就增加了对 Namecheap 的 DDNS 支持，所以可以直接使用 DDNS Client。按照 官方文档 给出的步骤一步步操作即可。
不过既然一条 HTTP 请求就能实现的功能，就没必要搞得这么复杂了，一个简单的脚本就能搞定。
#!/bin/sh Now=$(date +&amp;quot;%F %T&amp;quot;) ip=`ifconfig pppoe-wan | grep inet | awk &#39;{split($2,a,&amp;quot;:&amp;quot;);print a[2]}&#39;` url=&amp;quot;https://dynamicdns.park-your-domain.com/update?host=[HOST]&amp;amp;domain=[DOMAIN]&amp;amp;password=[DDNS_PASSWORD]&amp;amp;ip=$ip&amp;quot; curl &amp;quot;$url&amp;quot; &amp;gt; /dev/null 2&amp;gt;&amp;amp;1 if [ $? -eq 0 ]; then echo &amp;quot;[$Now] Success&amp;quot; else echo &amp;quot;[$Now] Fail&amp;quot; fi  其中，[HOST], [DOMAIN], [DDNS_PASSWORD] 是需要修改的地方，根据自己的实际情况做相应修改。比如，你有一个域名 example.</description>
      
    </item>
    
    <item>
      <title>入手树莓派 Raspberry Pi 2 Model B</title>
      <link>http://m.sjchn.com/p/2015/raspberrypi-my-1st/</link>
      <pubDate>Sat, 21 Nov 2015 00:00:00 +0000</pubDate>
      
      <guid>http://m.sjchn.com/p/2015/raspberrypi-my-1st/</guid>
      
        <description>近期入手了 树莓派 2 Model B，配件加了16G Micro SD 卡、透明外壳和风扇。电源可以用安卓手机的充电器，或者用USB Hub 加上一根Micro USB 线。打算再从退役的笔记本上拆下硬盘来接上，搭建简易的家用 NAS。
如果比较熟悉 Linux 的相关操作，可以不用外接显示器、键盘、鼠标等。直接在 SD 卡中写入系统，插入树莓派，再给树莓派插上网线，连到路由器上，找到 ip，ssh 登录即可。如果不太熟悉的话，还是建议外接显示器来操作。
安装系统 这里 列举了树莓派能用的系统，我用的是 Raspbian。需要首先下载镜像 Raspbian Wheezy，然后根据文档将镜像解压并写入 SD 卡。比如对于 Windows 系统，按照官方文档步骤一步步操作即可。
将 SD 卡插入树莓派，给树莓派接上电源，用网线连接路由器，然后再路由器的管理界面查看树莓派的 ip，ssh 登录即可。Windows 下可以用 putty 或者 xshell，推荐xshell。如果用 xshell 的话，可能会报 找不到匹配的 outgoing encryption 算法 这个错，这时需要修改连接的属性，在 连接 -&amp;gt; SSH -&amp;gt; 安全性 配置页面，点击 加密 右边的 编辑 按钮，勾选上 aes192-ctr, aes128-ctr 和 aes-256-ctr 这几项，如下图所示。
登录用户名和密码分别是 pi 和 raspberry 。
系统配置 修改源 系统默认是使用 raspbian.</description>
      
    </item>
    
    <item>
      <title>用 Netgear WNDR4300 打造翻墙路由器</title>
      <link>http://m.sjchn.com/p/2015/netgear-wndr4300-openwrt-shadowsocks-chinadns/</link>
      <pubDate>Thu, 05 Nov 2015 00:00:00 +0000</pubDate>
      
      <guid>http://m.sjchn.com/p/2015/netgear-wndr4300-openwrt-shadowsocks-chinadns/</guid>
      
        <description>VPS 推荐: BandwagonHost
前提：1. 有一台境外的 VPS 服务器，并且安装了 ShadowSocks 服务且能正常使用，如无特别说明，下文中将以 x.x.x.x 代表 VPS 的 ip ； 2. 熟悉路由器网络的基本配置。
家里联网设备逐渐多了起来，最近又添加了两台电视，有必要实现路由器端自动翻墙，提供自由的网络。经过一番调研，决定入手 Netgear WNDR4300 并刷 OpenWrt ，再装 ChinaDNS 和 ShadowSocks 。
这里 罗列了可以刷 OpenWrt 的设备，听说 Netgear 比较稳定，加上宽带现在是 100M，以后可能还会再升，还需要 2.4G 和 5G 双频支持，综合考虑，选定了 WNDR4300。
WNDR4300 自带的固件速度比较慢，至少从路由器的管理界面的反应速度来看是这样的，点个链接都要等老半天，完全不适合现代生活的快节奏。因此第一件事就是刷 OpenWrt 。
初看 这个页面，以为只能刷 Barrier Breaker 14.07 版本，结果 ShadowSocks 安装报错，查了下说是 OpenWrt 版本太低，于是升级到了 Chaos Calmer 15.05 版本。后来者就没必要走着弯路了，直接下载 15.05 官方固件，通过网页管理界面直接刷入，等几分钟路由器自动重启即可成功，一般不会出问题。
刷了 OpenWrt 后，就可以 telnet 登录路由器了，ip 是 192.168.1.1，用户名是 root，密码为空，然后执行 passwd 修改密码。成功后 telnet 功能即被禁用，需要 ssh 登录。也可以打开浏览器，访问 http://192.</description>
      
    </item>
    
    <item>
      <title>用 strongSwan 搭建 IPsec IKEv2 VPN</title>
      <link>http://m.sjchn.com/p/2015/strongswan-ikev2-vpn/</link>
      <pubDate>Mon, 28 Sep 2015 00:00:00 +0000</pubDate>
      
      <guid>http://m.sjchn.com/p/2015/strongswan-ikev2-vpn/</guid>
      
        <description>VPS 推荐: BandwagonHost
Shadowsocks 大部分时候都能满足翻墙的需求，只是最近感觉速度有点变慢，偶尔还出现错误，不知道是不是因为墙又加高了。以防万一，需要开发其它的翻墙姿势。
下面介绍用 strongSwan 搭建 IPsec IKEv2 VPN。服务器端是 CentOS 7，其它 Linux 发行版的话只需要做相应修改即可。客户端是 Windows 和 Android 。
1. 安装 strongSwan A. yum 安装 直接 yum 安装的话版本可能会比较老，可以从 这里 下载编译好的 RPM 包。或者使用 testing 源安装：
wget http://dl.fedoraproject.org/pub/epel/7/x86_64/e/epel-release-7-5.noarch.rpm rpm -Uvh epel-release-7-5.noarch.rpm yum --enablerepo=epel-testing install strongswan  这样安装后的 strongSwan 可执行文件是 /usr/sbin/strongswan，配置文件在 /etc/strongswan 下。
B. 源码编译安装 （推荐） 推荐直接从源码安装，因为这样能用上最新版，而且编译安装极其简单方便。
 安装依赖包
yum install gmp-devel openssl openssl-devel  从 strongSwan 官网 下载最新版本源代码，当前是 5.3.3，并用 md5sum 命令校验。</description>
      
    </item>
    
    <item>
      <title>Python 列表乘运算的一个陷阱</title>
      <link>http://m.sjchn.com/p/2015/python-list-multiplication-pitfall/</link>
      <pubDate>Tue, 22 Sep 2015 00:00:00 +0000</pubDate>
      
      <guid>http://m.sjchn.com/p/2015/python-list-multiplication-pitfall/</guid>
      
        <description>先来看下面这段代码：
a = [[]] * 2 a[0].append(1)  也许你期望 a = [[1], []]，然而，实际上 a = [[1], [1]]。
为了进一步分析原因，可以把 a 中每个元素的 id 打印出来：
a = [[]] * 2 print [id(x) for x in a] a[0].append(1) print [id(x) for x in a]  一种可能的输出结果是：
[140596116844416, 140596116844416] [140596116844416, 140596116844416]  可以发现，a[0] 和 a[1] 的 id 在修改 a[0] 前后都是一样的，也就是说，它们是对同一个对象的引用，修改 a[0] 同时也就修改了 a[1]。
不过这样说也不完全对，不妨来看下面这段代码：
a = [1] * 3 print [id(x) for x in a] print a a[0] += 1 print [id(x) for x in a] print a  可能的输出结果是：</description>
      
    </item>
    
    <item>
      <title>Go 和 C/C&#43;&#43; 的运算符优先级问题</title>
      <link>http://m.sjchn.com/p/2015/go-cpp-op-precedence/</link>
      <pubDate>Wed, 16 Sep 2015 00:00:00 +0000</pubDate>
      
      <guid>http://m.sjchn.com/p/2015/go-cpp-op-precedence/</guid>
      
        <description>一般都是把 Go 看成是现代化的 C，在 C 的基础上做了很多改进，语法更简单，很多语句也更优美了（比如 for）。但是也埋下了一些坑，不注意就会踩到，比如下面的这个运算符优先级的问题。
这个坑是在写加解密算法的时候碰到的，代码类似 这两行，如下：
v0 += ((v1 &amp;lt;&amp;lt; 4) + k0) ^ (v1 + sum) ^ ((v1 &amp;gt;&amp;gt; 5) + k1) v1 += ((v0 &amp;lt;&amp;lt; 4) + k2) ^ (v0 + sum) ^ ((v0 &amp;gt;&amp;gt; 5) + k3)  上面的两行代码是正确的，忘了当初是忘记加哪个括号了，当时检查代码好久都没发现问题，直到后来一点点加上括号才找出问题来：原来在 Go 里，+ - 和 ^ 的优先级是一样的，而在 C/C++ 里，+ - 的优先级要高于 ^。
其实也不用举这么复杂的例子，下面的简单例子就可以说明问题了：
3 * 2 &amp;lt;&amp;lt; 3 * 2  在 Go 里 结果是 ((3 * 2) &amp;lt;&amp;lt; 3) * 2 = 96，而在 C/C++， 以及 Python 里，结果却是 (3*2) &amp;lt;&amp;lt; (3*2) = 384。</description>
      
    </item>
    
    <item>
      <title>Windows 下搭建 Spark 源代码阅读环境</title>
      <link>http://m.sjchn.com/p/2015/win-spark-src-env/</link>
      <pubDate>Mon, 14 Sep 2015 00:00:00 +0000</pubDate>
      
      <guid>http://m.sjchn.com/p/2015/win-spark-src-env/</guid>
      
        <description>用 Spark 做数据分析也有半年多了，觉得至少应该大致过一下源代码。在 Windows 下搭建环境还是有点不太方便的，把步骤记录一下。
当然要用 Intellij IDEA (下文简称 Idea )，安装 Scala 插件。另外，也可以把 sbt 插件装上。
首先下载 Spark 1.5.0 源代码。
然后在 Idea 里， File -&amp;gt; New -&amp;gt; Project From Existing Source 选择 Spark 解压后的目录， Import project from external model -&amp;gt; Maven，然后一路 Next，等待处理完毕。
视网络情况而定，不太好的话可能需要半个小时。然后就可以编译 Spark 了：Build -&amp;gt; Rebuild Project
当然不一定成功，如果报的错误是 Error:(44, 66) not found: type SparkFlumeProtocol val 的话，做如下处理：
View -&amp;gt; Tool Window -&amp;gt; Maven Projects 选择 Spark Project External Flume Sink， 右键 -&amp;gt; Generate Sources and Update Folders  之后一般就能编译成功了，会有很多 Warning，都可以忽略。</description>
      
    </item>
    
    <item>
      <title>密码学基础简介</title>
      <link>http://m.sjchn.com/p/2015/crypt-intro/</link>
      <pubDate>Fri, 11 Sep 2015 00:00:00 +0000</pubDate>
      
      <guid>http://m.sjchn.com/p/2015/crypt-intro/</guid>
      
        <description>某天下午公司几个开发为一个接口的某个字段的安全性争论很久，为到底是用 AES 还是 MD5 还是 SHA1 争论，为 Java 和 Go 的 AES 加密结果为何不同调试很久……
其实这也没啥，如果没有系统地学过或了解过密码学的相关知识，这些概念以及实际的开发是会遇到问题。下面就来简单介绍密码学的基础知识，大部分内容都是来自 Computer Networks (5th Edition) ，所以看书是最好的选择。
不妨来看开发人员对 AES 和 MD5 的争论，其实这俩根本就不是一个东西。AES 是加密算法，而 MD5 是消息摘要算法，用途都是不一样的。因此首先来把密码学分成两类：加密和数字签名。
1 加密 加解密是密码学的核心。加密是将明文用算法和密钥加密成密文，解密是将密文用算法和密钥还原明文。为了抵抗密码分析，通常要求加密算法比较固定，但是密钥经常改变，因此衍生出 Kerckhoff&#39;s principle ： 所有的算法都应该是公开的，只有密钥需要保密。
另外，密码学的两条基础原则是：
 冗余性。密文应该含有一定的冗余，以便接收方能检查密文的合法性。 时效性。要能抵御重放攻击。  加密算法主要分为两类：对称密钥加密和公钥加密。
1.1 对称密钥加密 顾名思义，对称密钥加密指的是加密和解密的密钥是相同的，这就要求加解密双方首先安全地传递密钥。常见的算法主要有：
 DES (Data Encryption Standard) Triple DES (EDE, Encrypt Decrypt Encrypt) AES (Advanced Encryption Standard) - Rijndael  其中，AES 是 NIST 邀请全世界的专家来设计的加密标准，被选中的算法是 Rijndael，但是通常大家都称之为 AES 。当时的主要竞争者有 Twofish 和 Serpent，Rijndael 虽然加密强度不是最高的，但是实现简单，速度最快，可扩展性等指标都表现较好，综合考虑评价最优，因此被选中。这几个算法的比较可以参考 这个文档。</description>
      
    </item>
    
    <item>
      <title>移动平台的用户标识</title>
      <link>http://m.sjchn.com/p/2015/mobi-ids/</link>
      <pubDate>Wed, 09 Sep 2015 00:00:00 +0000</pubDate>
      
      <guid>http://m.sjchn.com/p/2015/mobi-ids/</guid>
      
        <description>在 PC 平台上，一般是用 cookie 识别用户，更进一步（流氓）的有 evercookie，如果用户禁用了 cookie，还可以用浏览器的指纹。这些方法一般都能较准确地识别用户，目前 PC 上看到的个性化广告一般都是基于以上几种方法。
到了移动平台上，情况就大不一样了。首先，第三方 cookie 一般默认是禁用的，然后，cookie 在 in-app 的广告中是没法取到的。这就要求换一种方法。
iOS 平台上情况相对简单，目前 app 都能获得 IDFA (identifier for advertisers)，所以一般都是靠 IDFA 来识别用户的。但是需要注意的是，在设置里，用户可以重置 IDFA，让自己对外看起来是一个全新的用户。
Android 平台则相对混乱得多。虽然 Google 提供了 Advertising ID，但是在国内的众多发行版中，Google 服务一般是被阉割的，所以自然没用。其它的有 Android ID，MAC， Device ID 等。stackoverflow 上的这个问题 提供了详细的解答：
 调用 TelephonyManager.getDeviceId() 总会返回一个值 带 SIM 卡的 GSM 设备调用 TelephonyManager.getSimSerialNumber() 会返回一个值 所有 CDMA 设备调用 TelephonyManager.getSimSerialNumber() 会返回空值 添加了 Google 账户的设备能取到 ANDROID_ID 添加了 Google 账户的 CDMA 设备 取到的 ANDROID_ID 和调用 TelephonyManager.getDeviceId() 取到的值是相同的  理论上来说 Android ID 是最好的选择，它可以通过下面的代码获取：</description>
      
    </item>
    
    <item>
      <title>Luhn algorithm</title>
      <link>http://m.sjchn.com/p/2015/luhn-algo/</link>
      <pubDate>Mon, 07 Sep 2015 00:00:00 +0000</pubDate>
      
      <guid>http://m.sjchn.com/p/2015/luhn-algo/</guid>
      
        <description>身份证号大家都很熟悉，最后的校验位可能取值是 0-9 和 X，其中的 X 一直被大家吐槽的比较多。根据维基百科上的描述，最后的校验位采用的是 ISO 7064:1983,MOD 11-2 算法，由于是模 11，所以有 10 个可能的取值，以 X 代替校验码 10。这其实给身份证号的数据库设计之类的带来挺多麻烦的，明明用数字就能解决的，非得还要加上字母 X。
当年为什么采用 MOD 11-2 算法我们不得而知。但不妨来看相关历史，身份证是 1984 年之后才出现的，也就是说，这个算法是在 1984 年之后才选择的，那个年代有没有出现更合适的算法呢？
今天研究手机的 IMEI 号，发现了 Luhn 算法。这是一个模 10 的算法，所有位数都是数字，被广泛用在信用卡，手机 IMEI 号等的校验位上。这个算法是 IBM 的科学家 Hans Peter Luhn 在 1954 年发明的，1960 年被授予专利。专利过期后该算法被广泛采用，并由 ISO/IEC 7812-1 所描述。
Luhn 算法对校验位的计算过程是这样的：
 将 0 添加到待校验的数最后（将校验位设为 0 ）。从最后一位（校验位）向左，将 2, 4, 6 等偶数位的数字乘 2，如果结果大于9，那么将它的两个数字相加（例如，原始数字是 8，乘 2 后是 16，需要改写成 7） 对所有数字求和 将上一步计算的和模 10，假设结果是 x，如果 x 等于 0，则校验位是 0；否则，校验位是 10-x  Python 代码如下所示，来自这里。</description>
      
    </item>
    
    <item>
      <title>使用 Hugo 搭建静态网站</title>
      <link>http://m.sjchn.com/p/2015/hugo-howto/</link>
      <pubDate>Thu, 03 Sep 2015 00:00:00 +0000</pubDate>
      
      <guid>http://m.sjchn.com/p/2015/hugo-howto/</guid>
      
        <description>静态网站生成一般 Jekll 和 Octopress 用的比较多，但是安装部署起来很麻烦。Hugo 是用 Go 语言实现的，安装部署非常简单，一个二进制文件就能用来调试和生成网站。
安装 Hugo 安装 Hugo 可以参考官方文档，主要有以下两种方式：
1. 编译安装 下载安装 Go，Mercurial 和 Git
下载 Hugo 源码并编译
go get -u -v github.com/spf13/hugo  依赖的包都会下载到 $GOPATH/src 下，Hugo 的可执行文件在 $GOPATH/bin 下。
2. 下载二进制可执行文件 从这里直接下载 Hugo 可执行文件
创建网站 参考官方文档 quickstart
如果要在 /path/to 下创建一个叫 site 的网站，需要执行的命令如下：
hugo new site /path/to/site cd /path/to/site hugo new post/hello.md git clone --recursive https://github.com/spf13/hugoThemes themes  其中，git clone 这一步耗时很长，网络状况一般的话可能需要一个多小时…… 其实也没有必要把所有的模板都下载下来，只下载感兴趣的模板就行了。比如 hyde
启动服务器 hugo server -t hyde -w  然后可以在浏览器里查看，比如 http://127.</description>
      
    </item>
    
  </channel>
</rss>