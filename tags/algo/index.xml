<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Algo on 诗酒趁华年</title>
    <link>http://m.sjchn.com/tags/algo/</link>
    <description>Recent content in Algo on 诗酒趁华年</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Sun, 16 Dec 2018 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="http://m.sjchn.com/tags/algo/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>如何计算真实的利率</title>
      <link>http://m.sjchn.com/p/2018/real_rate/</link>
      <pubDate>Sun, 16 Dec 2018 00:00:00 +0000</pubDate>
      
      <guid>http://m.sjchn.com/p/2018/real_rate/</guid>
      <description>在前面贷款基础知识之等本等息中我们看到，对于等本等息或者信用卡分期来说，名义利率（也就是纸面上列出的数字）并不是真实的利率，真实的利率比名义利率是要高很多的。那么在实际生活中，如何才能不轻易上当，识破各种机构的隐藏陷阱呢？下面介绍几种方法。
1. Excel RATE 函数 仍然举贷款基础知识之等本等息中的例子，贷款 10 万元，分 12 期偿还，每期还款 8833.33 元，名义利率 6%。RATE 公式的语法是：
RATE(nper, pmt, pv, [fv], [type], [guess])
其中，nper 是付款总期数；pmt 是每期的付款金额；pv 是现值；后面的 fv、type 和 guess 都是可选项，一般忽略即可。代入公式为：RATE(12, -8833.33, 100000) = 0.908% 即为每一期的利率，乘以 12 得到实际的年利率为 10.896%。
需要注意的一点是，因为每个月的 $8833.33$ 元是支出，所以是负数。另外，关于 RATE 函数的更详细解释可以参考官方文档。
2. 几十行 Pythond 代码 自己写代码时就不用那么严谨了，对于收入和支出的正负号不用那么讲究。粗略写了下，共 23 行代码。因为每月还款额都是一样的，所以用二分法去试利率，一般十多二十次都能收敛，对于未收敛的，直接返回 -1。具体代码如下所示：
def rate(nper, pmt, pv): def _pmt(_rate): x = (1 + _rate)**nper return pv * _rate * x / (x - 1) max_iter_times = 64 lr, hr, i = 0, 1.</description>
    </item>
    
    <item>
      <title>PNPOLY: 射线法判断点是否在多边形区域内部</title>
      <link>http://m.sjchn.com/p/2018/pnpoly/</link>
      <pubDate>Mon, 22 Oct 2018 00:00:00 +0000</pubDate>
      
      <guid>http://m.sjchn.com/p/2018/pnpoly/</guid>
      <description>最近跟地图打交道，有个问题是判断点是否在某个多边形区域内（一般都是凸多边形）。 其实之前也知道一个算法：就是以要判断的点为起点，以区域的顶点为终点作线段或直线， 遍历所有区域顶点，判断直线扫过的角度，如果是360度，说明在区域内，否则就是在区域外。
这次学到了一个新的算法 PNPOLY，代码非常简练，如下：
int pnpoly(int nvert, float *vertx, float *verty, float testx, float testy) { int i, j, c = 0; for (i = 0, j = nvert-1; i &amp;lt; nvert; j = i++) { if ( ((verty[i]&amp;gt;testy) != (verty[j]&amp;gt;testy)) &amp;amp;&amp;amp; (testx &amp;lt; (vertx[j]-vertx[i]) * (testy-verty[i]) / (verty[j]-verty[i]) + vertx[i]) ) c = !c; } return c; }  该算法的核心思想就是：以测试点为起点，作一条水平的射线，判断该射线与多边形区域的边的交点个数，如果为奇数个，说明在区域内，否则就在区域外。 为什么能成立呢？可以这样考虑：多边形区域（不考虑有洞的情况）将空间分成了内外两个部分，如果测试点在空间内，那么作一条射线，至少会与边有一个交点，相交后就到了区域外。 如果再有一个交点，又到了区域内，以此类推。因此奇数个交点说明在区域内，偶数个说明在区域外。 更专业的证明可以参考 Jordan curve theorem。
理解了思想，就是具体实现了。这段代码的详细解释如下：
 for (i = 0, j = nvert-1; i &amp;lt; nvert; j = i++)</description>
    </item>
    
    <item>
      <title>密码学基础简介</title>
      <link>http://m.sjchn.com/p/2015/crypt-intro/</link>
      <pubDate>Fri, 11 Sep 2015 00:00:00 +0000</pubDate>
      
      <guid>http://m.sjchn.com/p/2015/crypt-intro/</guid>
      <description>某天下午公司几个开发为一个接口的某个字段的安全性争论很久，为到底是用 AES 还是 MD5 还是 SHA1 争论，为 Java 和 Go 的 AES 加密结果为何不同调试很久……
其实这也没啥，如果没有系统地学过或了解过密码学的相关知识，这些概念以及实际的开发是会遇到问题。下面就来简单介绍密码学的基础知识，大部分内容都是来自 Computer Networks (5th Edition) ，所以看书是最好的选择。
不妨来看开发人员对 AES 和 MD5 的争论，其实这俩根本就不是一个东西。AES 是加密算法，而 MD5 是消息摘要算法，用途都是不一样的。因此首先来把密码学分成两类：加密和数字签名。
1 加密 加解密是密码学的核心。加密是将明文用算法和密钥加密成密文，解密是将密文用算法和密钥还原明文。为了抵抗密码分析，通常要求加密算法比较固定，但是密钥经常改变，因此衍生出 Kerckhoff&#39;s principle ： 所有的算法都应该是公开的，只有密钥需要保密。
另外，密码学的两条基础原则是：
 冗余性。密文应该含有一定的冗余，以便接收方能检查密文的合法性。 时效性。要能抵御重放攻击。  加密算法主要分为两类：对称密钥加密和公钥加密。
1.1 对称密钥加密 顾名思义，对称密钥加密指的是加密和解密的密钥是相同的，这就要求加解密双方首先安全地传递密钥。常见的算法主要有：
 DES (Data Encryption Standard) Triple DES (EDE, Encrypt Decrypt Encrypt) AES (Advanced Encryption Standard) - Rijndael  其中，AES 是 NIST 邀请全世界的专家来设计的加密标准，被选中的算法是 Rijndael，但是通常大家都称之为 AES 。当时的主要竞争者有 Twofish 和 Serpent，Rijndael 虽然加密强度不是最高的，但是实现简单，速度最快，可扩展性等指标都表现较好，综合考虑评价最优，因此被选中。这几个算法的比较可以参考 这个文档。</description>
    </item>
    
    <item>
      <title>Luhn algorithm</title>
      <link>http://m.sjchn.com/p/2015/luhn-algo/</link>
      <pubDate>Mon, 07 Sep 2015 00:00:00 +0000</pubDate>
      
      <guid>http://m.sjchn.com/p/2015/luhn-algo/</guid>
      <description>身份证号大家都很熟悉，最后的校验位可能取值是 0-9 和 X，其中的 X 一直被大家吐槽的比较多。根据维基百科上的描述，最后的校验位采用的是 ISO 7064:1983,MOD 11-2 算法，由于是模 11，所以有 10 个可能的取值，以 X 代替校验码 10。这其实给身份证号的数据库设计之类的带来挺多麻烦的，明明用数字就能解决的，非得还要加上字母 X。
当年为什么采用 MOD 11-2 算法我们不得而知。但不妨来看相关历史，身份证是 1984 年之后才出现的，也就是说，这个算法是在 1984 年之后才选择的，那个年代有没有出现更合适的算法呢？
今天研究手机的 IMEI 号，发现了 Luhn 算法。这是一个模 10 的算法，所有位数都是数字，被广泛用在信用卡，手机 IMEI 号等的校验位上。这个算法是 IBM 的科学家 Hans Peter Luhn 在 1954 年发明的，1960 年被授予专利。专利过期后该算法被广泛采用，并由 ISO/IEC 7812-1 所描述。
Luhn 算法对校验位的计算过程是这样的：
 将 0 添加到待校验的数最后（将校验位设为 0 ）。从最后一位（校验位）向左，将 2, 4, 6 等偶数位的数字乘 2，如果结果大于9，那么将它的两个数字相加（例如，原始数字是 8，乘 2 后是 16，需要改写成 7） 对所有数字求和 将上一步计算的和模 10，假设结果是 x，如果 x 等于 0，则校验位是 0；否则，校验位是 10-x  Python 代码如下所示，来自这里。</description>
    </item>
    
  </channel>
</rss>